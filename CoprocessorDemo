package com.userprofile.observer;

import org.apache.hadoop.hbase.client.Durability;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
import org.apache.hadoop.hbase.coprocessor.ObserverContext;
import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
import org.apache.hadoop.hbase.regionserver.wal.WALEdit;
import org.apache.hadoop.hbase.util.Bytes;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by on 2016/8/2.
 */
public class CoprocessorDemo extends BaseRegionObserver {
    public static final byte[] FIXED_ROW = Bytes.toBytes("gettime");
    //private static TransportClient client = null;

//    static {
//        Settings settings = Settings.settingsBuilder().put("client.transport.sniff", true)
//                .put("cluster.name","searchplatform" ) .build();//Config.name
//        InetSocketAddress initialIsa = new InetSocketAddress("ip", 0);
//        client = TransportClient.builder().settings(settings).build().addTransportAddress(new InetSocketTransportAddress(initialIsa.getAddress(), 9300));
//    }

    @Override
    public void postPut(ObserverContext<RegionCoprocessorEnvironment> e, Put put, WALEdit edit, Durability durability) throws IOException {
        TransportClient client1=null;
        try {
            Settings settings = Settings.settingsBuilder().put("client.transport.sniff", true)
                    .put("cluster.name","searchplatform" ) .build();//Config.name
            InetSocketAddress initialIsa = new InetSocketAddress("ip", 0);
            client1 = TransportClient.builder().settings(settings).build().addTransportAddress(new InetSocketTransportAddress(initialIsa.getAddress(), 9300));
            for (int i = 0; i < 100; i++) {
                Map<String, Object> jsonValue = new HashMap<String, Object>();
                jsonValue.put("field", "test");
                client1.prepareIndex("student_index", "student_info", "stu_103161066"+i).setSource(jsonValue).execute().actionGet();

            }
        } catch (Exception ex) {

        } finally {
            if(client1!=null)
                client1.close();
        }
    }

}
